//Author: John Serrano
//Free to use and distribute
//AI code goes in Turner.takeTurn()

import javax.swing.*;
import javax.swing.border.*;
import java.awt.Font;
import java.awt.BorderLayout;
import java.lang.Math;

public class TicTacLife{
    static int boardSize = 12;

    public static void main(String[] args){
	String board[][] = new String[boardSize][boardSize];
	for (int i = 0; i < boardSize; i++){
	    for (int j = 0; j < boardSize; j++){
		board[j][i] = ".";
	    }
	}
	
	Turner turner = new Turner();

	myWindow window = new myWindow(board);
	
	//main loop
	while(true){

	    mark myMark;
	    myMark = turner.takeTurn(board);

	    if (myMark==null) break;

	    board[myMark.getX()][myMark.getY()] = myMark.c;
	    //does not check legality, do that in takeTurn

	    int scoreX = score("X", board);
	    
	    try{Thread.sleep(1000);}
	    catch (InterruptedException ex){
	    }

	    window.update(score("X", board), score("O", board));
 	}
	System.out.println("END");
    }

    private static void showBoard(String[][] board){
	for (int i = 0; i < boardSize; i++){
	    for (int j = 0; j < boardSize; j++){
		System.out.print(board[j][i] + " ");
	    }
	    System.out.print("\n");
	}
	System.out.println("*************");
    }

    private static int score(String toScore, String[][] board){
	int lineLength = 0;
	int pts = 0;

	//score vertically NOTE: single mark counts for no points
	for (int i = 0; i < boardSize; i++){
	    for (int j = 0; j < boardSize; j++){
		if (board[i][j].equals(toScore) && j<(boardSize-1)){
		    if (board[i][j+1].equals(toScore)){
			lineLength++;
		    }
		    else{
			if (lineLength!=0){
			    pts = (int) Math.pow(2, lineLength) + pts;
			}
			lineLength = 0;
		    }
		}
		else{
		    if (lineLength!=0){
			pts = (int) Math.pow(2, lineLength) + pts;
		    }
		    lineLength = 0;
		}
	    }
	}

	//score horizontally
	for (int i = 0; i < boardSize; i++){
	    for (int j = 0; j < boardSize; j++){
		if (board[j][i].equals(toScore) && j<(boardSize-1)){
		    if (board[j+1][i].equals(toScore)){
			lineLength++;
		    }
		    else if (lineLength!=0){
			    pts = (int) Math.pow(2, lineLength) + pts;
			    lineLength = 0;
			}
		}
		else if (lineLength!=0){
		    pts = (int) Math.pow(2, lineLength) + pts;
		    lineLength = 0;
		}	
	    }
	}
	
	//score diagonally
	//todo
	
	
	//score diagonally other direction
	//todo

	return pts;
    }
}

class Turner{

    int turnCount = 0;

    mark takeTurn(String[][] board){
	//process turn and return mark object (square chosen by AI). Todo

	mark result;

	boolean turnX;
	if ((turnCount % 2)==0) turnX = true;
	else turnX = false;

	//first move places a mark generated by default constructor.
	if (turnCount==0){
	    turnCount++;
	    result = new X();
	    result.c="X"; //why is this necessary? probably to do with casting
	    return result;
	}

	else if (turnCount==1){
	    turnCount++;
	    result = new O(2,3);
	    result.c="O";
	    return result;
	}

	else if (turnCount==2){
	    turnCount++;
	    result = new X(3,2);
	    result.c="X";
	    return result;
	}

	else if (turnX){
	    
	}
	
	else if (!turnX){

	}

	//return null if no valid move
	return null;
    }
}
abstract class mark{
    String c;
    abstract int getX();
    abstract int getY();
    abstract void setX(int x);
    abstract void setY(int y);
    abstract String getC();
    abstract boolean equals(mark other);
}
class X extends mark{
    private int x, y;
    String c = "X";
    X(){
	this.x = 2;
	this.y = 2;
    }
    X(int x, int y){
	this.x = x;
	this.y = y;
    }
    int getX(){
	return this.x;
    }
    int getY(){
	return this.y;
    }
    void setX(int x){
	this.x = x;
    }
    void setY(int y){
	this.y = y;
    }
    String getC(){
	return "X";
    }
    boolean equals(mark other){
	if (other.c.equals("X")) return true;
	return false;
    }
}
class O extends mark{
    String c = "O";
    private int x, y;
    O(){
	this.x = 2;
	this.y = 2;
    }
    O(int x, int y){
	this.x = x;
	this.y = y;
    }
    int getX(){
	return this.x;
    }
    int getY(){
	return this.y;
    }
    void setX(int x){
	this.x = x;
    }
    void setY(int y){
	this.y = y;
    }
    String getC(){
	return "O";
    }
    boolean equals(mark other){
	if (other.getC().equals("O")) return true;
	return false;
    }
}

class myWindow extends JFrame{
    String[][] board;
    String toDisplay;
    JLabel boardL;
    JLabel score;
    
    myWindow(){
	JLabel label = new JLabel("No board to display");
	add(label);
	this.setSize(400, 400);
	setVisible(true);
    }

    myWindow(String[][] board){
	this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	this.setLayout(new BorderLayout());
	setArray(board);
	toDisplay = "<html>";
        for (int i = 0; i < board.length; i++){
	    for (int j = 0; j < board.length; j++){
		toDisplay = toDisplay + board[j][i] + " ";
	    }
	    toDisplay = toDisplay + "<br>";
	}
	toDisplay = toDisplay + "</html>";
	boardL = new JLabel(toDisplay, SwingConstants.CENTER);
	boardL.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
	boardL.setFont(new Font("Courier New", Font.BOLD, 12));
 	add(boardL, BorderLayout.CENTER);

	JLabel header = new JLabel("TIC TAC LIFE\n\n", SwingConstants.CENTER);
	add(header, BorderLayout.PAGE_START);

	score = new JLabel("<html>Player 1 (X):<br>0<br><br>Player 2 (O):<br>0</html>", SwingConstants.CENTER);
	score.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
	add(score, BorderLayout.LINE_START);

	this.setSize(400, 400);
	setVisible(true);
    }
    
    void setArray(String[][] board){
	this.board = board;
    }
    
    void update(int scoreX, int scoreO){
	toDisplay = "<html>";
        for (int i = 0; i < board.length; i++){
	    for (int j = 0; j < board.length; j++){
		toDisplay = toDisplay + board[j][i] + " ";
	    }
	    toDisplay = toDisplay + "<br>";
	}
	toDisplay = toDisplay + "</html>";
	
	this.remove(boardL); //delete old board
	boardL = new JLabel(toDisplay, SwingConstants.CENTER);
	boardL.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
	boardL.setFont(new Font("Courier New", Font.BOLD, 12));
	add(boardL, BorderLayout.CENTER);

	this.remove(score);
	String scoreLabel = "<html>Player 1 (X):<br>" + scoreX + "<br><br>Player 2 (O):<br>" + scoreO + "</html>";
	score = new JLabel(scoreLabel, SwingConstants.CENTER);
	score.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
	add(score, BorderLayout.LINE_START);

	this.setSize(400, 400);
	setVisible(true);
    }
    
}
